% Sean Anderson, 2013, sean@seananderson.ca
\documentclass[12pt]{article}
\usepackage{geometry}
\geometry{letterpaper}
\usepackage{graphicx}
\usepackage{Sweave}
\usepackage{url}
\usepackage[usenames,dvipsnames]{color}
\usepackage[pdftex,colorlinks=true,urlcolor=MidnightBlue]{hyperref}
\usepackage[pdftex,colorlinks=true]{hyperref}

\usepackage{titling}
\newcommand{\subtitle}[1]{%
  \posttitle{%
    \par\end{center}
    \begin{center}\large#1\end{center}}%
}


\newcommand{\reshape}{\texttt{reshape2}}
\newcommand{\melt}{\texttt{melt}}
\newcommand{\cast}{\texttt{cast}}
\newcommand{\dcast}{\texttt{dcast}}
\newcommand{\ggplot}{\texttt{ggplot2}}
\newcommand{\plyr}{\texttt{plyr}}
\newcommand{\R}{\texttt{R}}
\newcommand{\wfd}{wide-format data}
\newcommand{\lfd}{long-format data}

\title{An introduction to the \reshape\ package}

\subtitle{BISC 888--1 Simon Fraser University}

\author{Sean C. Anderson\\ \texttt{sean@seananderson.ca}}

\setlength\parskip{0.1in}
\setlength\parindent{0in}

\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle

\reshape\ is an \R\ package written by Hadley Wickham that makes it easy to
transform data between ``wide'' and ``long'' format. It is based around two
key functions: \melt\ and \cast:

\melt\ takes \wfd\ and melts it into \lfd.

\cast\ takes \lfd\ and casts it into \wfd.

(Wondering what ``long'' and ``wide'' data are? We'll get to that next.)

Think of working with metal: if you melt metal, it drips and becomes long. If
you cast it into a mould, it becomes wide.

\section{What makes data wide or long?}

Wide data has a column for each variable. For example, this is \wfd:

<<<include=FALSE, echo=FALSE>>=
library(reshape2)
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
d <- dcast(aqm, month ~ variable, mean, margins = c("month", "variable"))
d <- d[1:4, -c(1, 3, 6)]
@

<<<echo=FALSE>>=
head(d)
@

And this is \lfd:

<<<echo=FALSE>>=
melt(d)
@

Long-format data has a column for possible variable types and a column for the
values of those variables. Long-format data isn't necessarily only two
columns. For example, we might have ozone measurements for each day of the
year. In that case, we could have another column for day. In other words,
there are different levels of ``longness''. The ultimate shape you want to get
your data into will depend on what you are doing with it.

It turns out that you need \wfd\ for some types of data analysis and \lfd\ for
others. In reality, you need \lfd\ much more commonly than \wfd. For example,
\ggplot\ requires \lfd, \plyr\ requires \lfd, and most modelling functions
(such as \texttt{lm()}, \texttt{glm()}, and \texttt{gam()}) require \lfd. But
people often find it easier to record their data in wide format.


\section{Wide- to \lfd: the \melt\ function}

For this example we'll work with the \texttt{airquality} dataset that is built
into \R. First we'll change the column names to lower case to make them easier
to work with. Then we'll look at the data:

<<<>>=
names(airquality) <- tolower(names(airquality))
head(airquality)
@

What happens if we run the function \melt\ with all the default argument
values?

<<<>>=
aql <- melt(airquality) # [a]ir [q]uality [l]ong format
head(aql)
tail(aql)
@

By default, \melt\ has assumed that all columns with numeric values are
variables with values. Often this is what you want. Maybe here we want to know
the values of \texttt{ozone}, \texttt{solar.r}, \texttt{wind}, and
\texttt{temp} for each \texttt{month} and \texttt{day}. We can do that with
\melt\ by telling it that we want \texttt{month} and \texttt{day} to be ``ID
variables''. ID variables are the variables that identify individual rows of
data.

<<<>>=
aql <- melt(airquality, id.vars = c("month", "day"))
head(aql)
@

What if we wanted to control the column names in our \lfd? \melt\ lets us set
those too all in one step:

<<<>>=
aql <- melt(airquality, id.vars = c("month", "day"),
  variable.name = "climate_variable", value.name = "climate_value")
head(aql)
@

That's about all there is to \melt.

\section{Long- to \wfd: the \cast\ functions}

Whereas going from wide- to \lfd\ is pretty straightforward, going from long-
to \wfd\ can take a bit more thought. It usually involves some head scratching
and some trial and error for all but the simplest cases. Let's go through some
examples.

In \reshape\ there are multiple \cast\ functions. Since you will most commonly
work with \texttt{data.frame} objects, we'll explore the \dcast\ function.
(There is also \texttt{acast} to return a vector, matrix, or array.)

Let's take the long-format \texttt{airquality} data and \cast\ it into some
different wide formats. To start with, we'll recover the same format we
started with and compare the two.

\dcast\ uses a formula to describe the shape of the data. The arguments on the
left refer to the ID variables and the arguments on the right refer to the
measured variables. Coming up with the right formula can take some trial and
error at first. So, if you're stuck don't feel bad about just experimenting
with formulas. There are usually only so many ways you can write the formula.

Here, we need to tell \dcast\ that \texttt{month} and \texttt{day} are the ID
variables (we want a column for each) and that \texttt{variable} describes the
measured variables. Since there is only one remaining column, \dcast\ will
figure out that it contains the values themselves. We could explicitly declare
this with \texttt{value.var}. (And in some cases it will be necessary to do so.)

<<>>=
aql <- melt(airquality, id.vars = c("month", "day"))
head(aql)
aqw <- dcast(aql, month + day ~ variable) # [a]ir [q]uality [w]ide
aqw <- dcast(aql, month + day ~ variable, value.var = "value") # same thing
head(aqw)
head(airquality) # original data
@

So, besides re-arranging the columns, we've recovered our original data.

If it isn't clear to you what just happened there, then have a look at
Figure~1.

\begin{figure}[htbp]
  \centering
  \includegraphics[width=6.5in]{dcast-illustration}
  \caption{An illustration of the \texttt{dcast} function. The blue shading
  indicates ID variables that we want to represent individual rows. The red
  shading represents variable names that we want to swing into column names.
  The grey shading represents the data values that we want to fill in the
  cells with.}
  \label{fig:dcast}
\end{figure}

\clearpage

One confusing ``mistake'' you might make is casting a data set in which there
is more than one value per data cell. For example, this time we won't include
\texttt{day} as an ID variable:

<<>>=
dcast(aql, month ~ variable)
@

When you run this in \R, you'll notice the warning message:

\begin{verbatim}
Aggregation function missing: defaulting to length
\end{verbatim}

And if you look at the output you got, the cells are filled with the number of
data rows for each month-climate combination. The numbers we're seeing are the
number of days recorded in each month. When you \cast\ your data and there are
multiple values per cell, you also need to tell \dcast\ how to aggregate the
data. For example, maybe you want to take the \texttt{mean}, or the
\texttt{median}, or the \texttt{sum}. Let's try the last example, but this
time we'll take the mean of the climate values. We'll also pass the option
\texttt{na.rm = TRUE} through the \texttt{...} argument to remove \texttt{NA}
values.

<<<>>=
dcast(aql, month ~ variable, fun.aggregate = mean, na.rm = TRUE)
@

Unlike \melt, there are some other fancy things you can do with \dcast\ that
I'm not covering here. It's well worth reading the help file \texttt{?dcast}.
For example, you can compute summaries for rows and columns, subset the
columns, and fill in missing cells in one call to \dcast.

\section{Additional help}

Read the package help:\\
\texttt{help(package = "reshape2")}

See the \reshape\ website:\\
\url{http://had.co.nz/reshape/}

And read the paper on \texttt{reshape}:\\
Wickham, H. (2007). Reshaping data with the \texttt{reshape} package. 21(12):1--20.
\\\url{http://www.jstatsoft.org/v21/i12}\\
(But note that the paper is written for the \texttt{reshape} package not the
\texttt{reshape2} package.)

\end{document}
