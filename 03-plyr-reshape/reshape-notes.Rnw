% Sean Anderson, 2013, sean@seananderson.ca
\documentclass[12pt]{article}
\usepackage{geometry}
\geometry{letterpaper}
\usepackage{graphicx}
\usepackage{Sweave}
\usepackage{url}
\usepackage[usenames,dvipsnames]{color}
\usepackage[pdftex,colorlinks=true,urlcolor=MidnightBlue]{hyperref}
\usepackage[pdftex,colorlinks=true]{hyperref}
\usepackage{booktabs}
\usepackage{listings}

\usepackage{titling}
\newcommand{\subtitle}[1]{%
  \posttitle{%
    \par\end{center}
    \begin{center}\large#1\end{center}}%
}

\newcommand{\reshape}{\texttt{reshape2}}
\newcommand{\melt}{\texttt{melt}}
\newcommand{\cast}{\texttt{cast}}
\newcommand{\ggplot}{\texttt{ggplot2}}
\newcommand{\plyr}{\texttt{plyr}}
\newcommand{\R}{\texttt{R}}
\newcommand{\wfd}{wide-format data}
\newcommand{\lfd}{long-format data}

\title{An introduction to the \reshape\ package}

\subtitle{BISC 888--1 Simon Fraser University}

\author{Sean C. Anderson\\ \texttt{sean@seananderson.ca}}

\setlength\parskip{0.1in}
\setlength\parindent{0in}


\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle

\reshape\ is an \R\ package written by Hadley Wickham that makes it easy
to transform data between ``wide'' and ``long'' format. It is based around two
key functions: \melt\ and \cast:

\melt\ takes \wfd\ and melts it into \lfd.

\cast\ takes \lfd\ and casts it into \wfd.

Think of working with metal: if you melt metal, it drips and becomes long.
If you cast it into a mold, it becomes wide.

It turns out that you need \wfd\ for some types of data analysis
and \lfd\ for others. In reality, you need \lfd\ much
more commonly than \wfd. For example, \ggplot\ requires
\lfd, \plyr\ requires \lfd, and most modelling
functions (such as \texttt{lm()}, \texttt{glm()}, and \texttt{gam()}) require
\lfd. But people often find it easier to record their data in wide
format.

\clearpage

\section{What makes data wide or long?}

Wide data has a column for each variable. For example, this is \wfd:

<<<include=FALSE, echo=FALSE>>=
library(reshape2)
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
d <- dcast(aqm, month ~ variable, mean, margins = c("month", "variable"))
d <- d[1:4, -c(1, 3, 6)]
@

<<<echo=FALSE>>=
head(d)
@

And this is \lfd:

<<<echo=FALSE>>=
melt(d)
@

\section{Wide- to \lfd: the \melt\ function}

For this example we'll work with the \texttt{airquality} dataset that is
built into \R. First we'll change the column names to lower case to make them
easier to work with. Then we'll look at the data:

<<<>>=
names(airquality) <- tolower(names(airquality))
head(airquality)
@

What happens if we run the function \melt\ with all the default argument
values?

<<<>>=
airquality_long <- melt(airquality)
head(airquality_long)
tail(airquality_long)
@

By default \melt\ has assumed that all columns with numeric values are
variables with values. Often this is what you want. Maybe here we want to know
the values of \texttt{ozone}, \texttt{solar.r}, \texttt{wind}, and
\texttt{temp} for each \texttt{month} and \texttt{day}. We can do that
with \melt\ by telling it that we want \texttt{month} and \texttt{day} to be
``ID variables'':

<<<>>=
airquality_long <- melt(airquality, id.vars = c("month", "day"))
head(airquality_long)
@

What if we wanted to control the column names in our \lfd? \melt\ let's us set
those too all in one step:

<<<>>=
airquality_long <- melt(airquality, id.vars = c("month", "day"),
  variable.name = "climate_variable", value.name = "climate_value")
head(airquality_long)
@

That's about all there is to \melt!

\section{Long- to \wfd: the \cast\ functions}

Whereas going from wide- to \lfd\ is pretty straightforward, going from long-
to \wfd\ can take a bit more thought. It usually involves some head scratching
and some trial and error for all but the simplest cases. Let's go through some
examples.




\end{document}
