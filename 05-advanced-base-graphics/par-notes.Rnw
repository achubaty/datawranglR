% Sean Anderson, 2013, sean@seananderson.ca
\documentclass[12pt]{article}
\usepackage{geometry}
\geometry{letterpaper}
\usepackage{graphicx}
\usepackage{url}
\usepackage{titling}
\newcommand{\subtitle}[1]{%
  \posttitle{%
    \par\end{center}
    \begin{center}\large#1\end{center}}%
}

\title{Pretty plots with \texttt{par}}
\subtitle{BISC 888--1 Simon Fraser University}
\author{Sean C. Anderson\\ \texttt{sean@seananderson.ca}}

%\newcommand{\par}{\texttt{par}}

\setlength\parskip{0.1in}
\setlength\parindent{0in}

\begin{document}

<<set-knitr-options, echo=FALSE>>=
library(knitr)
opts_chunk$set(fig.align='center', fig.pos="htpb", cache=FALSE, echo=TRUE,
message=FALSE, autodep=TRUE, fig.path='figure/', fig.width=4, fig.height=4)
opts_chunk$set(warning=FALSE, message=FALSE, tidy=FALSE, refresh=TRUE)
opts_chunk$set(dev = 'pdf')
@

\maketitle

%take a default figure and take it to a pretty figure showing all the par steps along the way

%to include - grey lines, grey on axes, las on axes, location of axis labels, margin space, panel label

%show lines, polygons, points, ...

Base plotting functions let you draw with data. If you can imagine it, you can
make it with base graphics functions in R.

The price you pay for this flexibility is a lack of structured grammar like
\texttt{ggplot2}, a lot of sometimes-complex code, and a lot of time coding.

Explore data rapidly with \texttt{ggplot2}, and if you reach the limits of
what you can do with \texttt{ggplot2}, or you find a plot you want to
customize beyond what you can easily do with \texttt{ggplot2}, then create it
with base graphics.

\section{Making one panel look good}

In this section, we're going to start with a default base graphics plot and thoroughly customize it.

Let's start with a basic scatterplot. We'll generate some data and make a default plot.

<<>>=
set.seed(2)
x <- seq_len(50)
y <- x * 3 + rnorm(50, sd = 20)
plot(x, y)
@

First, let's set up \texttt{par}. We'll cover some common adjustments here,
but there are many options we won't touch on. It is well worth reading the
help file \texttt{?par} frequently. If you want to be able to quickly produce
highly-customized R graphics, you will need to be intimately familiar with the
\texttt{par} options.


We're going to reduce the character
expansion value \texttt{cex}.  This will make everything a bit smaller. The
\texttt{cex} value you choose will depend on the aesthetics of the plot and
the output (e.g. PDF) dimensions. Typically, values around 0.8 will work.
Lower values can be useful if you are working with small plots or plots with
lots of panels.

<<>>=
par(cex = 0.8)
@

We're also going to set \texttt{mgp}, which controls the spacing of the axis
titles, axis number labels, and the axis line itself. The first two values
(axis title and label and label spacing) are useful to set.

<<>>=
par(mgp = c(2, 0.6, 0))
@

We're going to reduce the tick length by setting \texttt{tck}.

<<>>=
par(tck = -0.02)
@

We're going to make all the axis text horizontal by setting \texttt{las} (label axis style).

<<>>=
par(las = 1)
@

And now remake the plot:

<<par-setup, echo=5>>=
par(cex = 0.8)
par(mgp = c(2, 0.6, 0))
par(tck = -0.02)
par(las = 1)
plot(x, y)
@

\clearpage
We're getting there. Now let's emphasize the data by lightening the axes and axis labels. There are multiple ways to do this, but I'm going to show you the most flexible way: starting with a blank plot and building it up piece by piece:

<<echo=5:99>>=
par(cex = 0.8)
par(mgp = c(2, 0.6, 0))
par(tck = -0.02)
par(las = 1)
plot(x, y, type = "n", axes = FALSE, ann = FALSE)
points(x, y)
axis_col <- "grey50"
box(col = axis_col)
axis(1, col = axis_col, col.axis = axis_col)
axis(2, col = axis_col, col.axis = axis_col)
mtext("X axis label", side = 1, col = axis_col, line = 2.0, cex = 0.9)
mtext("Y axis label", side = 2, col = axis_col, las = 3, 
  line = 2.2, cex = 0.9)
@

\clearpage
\section{Adding a colour dimension}

This is going to be much more involved than in \texttt{ggplot}, but bear with
me. It's also very flexible. First we're going to bring in a colour palette.
Then we're going to match cut that colour palette up according to our data.
Then we're going to join that colour palette to the data we want to plot.

\texttt{RColorBrewer} is an excellent package for colour palettes. We're
going to start with one of those. Since the data we're going to colour is
continuous we're going to pick a continuous colour scale.

First, let's create some fake data we want to colour by. We'll call this
column \texttt{z}. We'll combine, \texttt{x}, \texttt{y}, and \texttt{z} in a
data frame.

<<>>=
d <- data.frame(x, y, z = 50:1)
@

Now, we'll load the \texttt{RColorBrewer} library and read in a palette.

<<>>=
library(RColorBrewer)
pal <- brewer.pal(9, "YlOrRd")
@

Now, we're going to create a data frame that matches colours with values of
\texttt{z} that we want to assign colours at.

<<>>=
pal_df <- data.frame(pal = pal, cuts = seq(min(d$z), max(d$z), 
    length.out = length(pal)), stringsAsFactors = FALSE)
pal_df
@

And we'll use \texttt{findInterval} to find the rows of cut values that match
the values of \texttt{z}:

<<>>=
pal_indices <- findInterval(d$z, pal_df$cuts)
@

Then we'll use those indices to pick out the colour palette values:

<<>>=
d$col <- pal_df$pal[pal_indices]
@

Now we can plot with those colours:

<<echo=2:999>>=
par(cex = 0.8)
plot(d$x, d$y, col = d$col, pch = 19)
@

\section{Adding lines and polygons}

We're going to work through an example adding a linear model fit and shaded
confidence intervals to our scatter plot.

There are many ways to do this (and for this simple case, many much simpler
ways), but this is a general example that can work across nearly any type of
linear or non-linear model with minimal modification.

First, we'll fit the model:

<<>>=
m <- lm(y ~ x, data = d)
@

Now, we'll create a new prediction data frame and generate values of
\texttt{x} that we want to predict across. We'll predict across a sequence of
\texttt{x} values that are close enough to each other that our confidence
interval curve will look smooth.

We'll get both the fitted line and the 95\% confidence intervals by adding and
subtracting 1.96 times the standard error on the predictions.

<<>>=
pred_df <- data.frame(x = seq(min(x), max(x), length.out = 100))
pred_df$fit <- predict(m, newdata = pred_df)
se <- predict(m, newdata = pred_df, se = TRUE)$se.fit
pred_df$lower <- pred_df$fit + 1.96 * se
pred_df$upper <- pred_df$fit - 1.96 * se
@

Then we'll plot the data again and add the line with \texttt{lines} and the
confidence interval with \texttt{polygon}. The first argument to
\texttt{polygon} is a sequence of x-values from left to right and the second
argument is a sequence of y-values from left to right. Therefore, some of the
vectors need to be reversed with the \texttt{rev} function. We'll also use the
\texttt{with} function, which allows us to avoid writing out
\texttt{pred\_df\$} repeatedly. It allows us to access the column names
directly in that line of code.

<<echo=2:999>>=
par(cex = 0.8)
plot(d$x, d$y)
with(pred_df, lines(x, fit))
with(pred_df, polygon(c(x, rev(x)), c(lower, rev(upper)), 
  border = NA, col = "#00000050"))
@

%\section{Working with points and segments}

%<<morph, fig.width=5, fig.height=4>>=
%morph <- read.csv("Morph_for_Sato.csv")
%library(plyr)
%morph_body <- ddply(morph, "TaxonOrig", summarize, l =
%  quantile(BodyL, 0.25, na.rm = TRUE), m = quantile(BodyL, 0.5,
%    na.rm = TRUE), u = quantile(BodyL, 0.75, na.rm = TRUE))
%morph_body <- na.omit(morph_body)
%morph_body$TaxonOrig <- factor(morph_body$TaxonOrig)
%par(mar = c(4, 18, 1, 1), cex = 0.8)
%with(morph_body, plot(m, TaxonOrig, xlim = range(morph_body[, 2:4],
%      na.rm = TRUE), type = "p", xlab = "Body length (mm)", ylab =
%    "", yaxt = "n"))
%with(morph_body, segments(l, as.numeric(TaxonOrig), u,
%    as.numeric(TaxonOrig)))
%with(morph_body, axis(2, at = as.numeric(TaxonOrig), labels =
%    TaxonOrig, las = 1))
%@



\end{document}
